#! /usr/bin/python3

# IMPORTS
import sys
import os
from argparse import ArgumentParser
from argparse import Action
from argparse import RawTextHelpFormatter
import configparser

# VARIABLES GLOBALES
EC_IO_FILE="/sys/kernel/debug/ec/ec0/io"
CFG_FILE="/etc/isw.conf"
DUMP_POS=""
list_s=[]

# FONCTIONS
# option -r
def ec_read(value):
	with open(CFG_FILE) as cfgfile:
		cfgp=configparser.ConfigParser()
		cfgp.read_file(cfgfile)
		rcta = int(cfgp.get(value, 'realtime_cpu_temp_address'),16)
		rcfsa = int(cfgp.get(value, 'realtime_cpu_fan_speed_address'),16)
		rgta = int(cfgp.get(value, 'realtime_gpu_temp_address'),16)
		rgfsa = int(cfgp.get(value, 'realtime_gpu_fan_speed_address'),16)
	with open(EC_IO_FILE,"rb") as file:
		file.seek(rcta)
		temp_cpu = int(file.read(1).hex(),16)
		file.seek(rcfsa)
		fans_cpu = int(file.read(1).hex(),16)
		file.seek(rgta)
		temp_gpu = int(file.read(1).hex(),16)
		file.seek(rgfsa)
		fans_gpu = int(file.read(1).hex(),16)
		print ("CPU")
		print("└─temp     (°C): "+str(temp_cpu))
		print("└─fan speed (%): "+str(fans_cpu))
		print ("GPU")
		print("└─temp     (°C): "+str(temp_gpu))
		print("└─fan speed (%): "+str(fans_gpu))

# option -w
def ec_write(value):
	global DUMP_POS
	DUMP_POS="after modification"
	print('\r')
	with open(CFG_FILE) as cfgfile:
		cfgp=configparser.ConfigParser()
		cfgp.read_file(cfgfile)
		list_ta = [0,0,0,0,0,0]
		list_ta[0] = int(cfgp.get(value, 'temp_address_0'),16)
		list_ta[1] = int(cfgp.get(value, 'temp_address_1'),16)
		list_ta[2] = int(cfgp.get(value, 'temp_address_2'),16)
		list_ta[3] = int(cfgp.get(value, 'temp_address_3'),16)
		list_ta[4] = int(cfgp.get(value, 'temp_address_4'),16)
		list_ta[5] = int(cfgp.get(value, 'temp_address_5'),16)
		list_t = [0,0,0,0,0,0]
		list_t[0] = int(cfgp.get(value, 'temp_0'))
		list_t[1] = int(cfgp.get(value, 'temp_1'))
		list_t[2] = int(cfgp.get(value, 'temp_2'))
		list_t[3] = int(cfgp.get(value, 'temp_3'))
		list_t[4] = int(cfgp.get(value, 'temp_4'))
		list_t[5] = int(cfgp.get(value, 'temp_5'))
		list_fsa = [0,0,0,0,0,0,0]
		list_fsa[0] = int(cfgp.get(value, 'fan_speed_address_0'),16)
		list_fsa[1] = int(cfgp.get(value, 'fan_speed_address_1'),16)
		list_fsa[2] = int(cfgp.get(value, 'fan_speed_address_2'),16)
		list_fsa[3] = int(cfgp.get(value, 'fan_speed_address_3'),16)
		list_fsa[4] = int(cfgp.get(value, 'fan_speed_address_4'),16)
		list_fsa[5] = int(cfgp.get(value, 'fan_speed_address_5'),16)
		list_fsa[6] = int(cfgp.get(value, 'fan_speed_address_6'),16)
		list_fs = [0,0,0,0,0,0,0]
		list_fs[0] = int(cfgp.get(value, 'fan_speed_0'))
		list_fs[1] = int(cfgp.get(value, 'fan_speed_1'))
		list_fs[2] = int(cfgp.get(value, 'fan_speed_2'))
		list_fs[3] = int(cfgp.get(value, 'fan_speed_3'))
		list_fs[4] = int(cfgp.get(value, 'fan_speed_4'))
		list_fs[5] = int(cfgp.get(value, 'fan_speed_5'))
		list_fs[6] = int(cfgp.get(value, 'fan_speed_6'))
	with open(EC_IO_FILE,"r+b") as file:
		print("cpu_temp:")
		for i in range(6):
			file.seek(list_ta[i])
			file.write(bytes((list_t[i],)))
			print('Value '+hex(list_t[i])+'('+str(list_t[i])+'°C)'+' written at '+hex(list_ta[i])+'(byte'+str(list_ta[i])+')')
		print("cpu_fan_speed:")
		for i in range(7):
			file.seek(list_fsa[i])
			file.write(bytes((list_fs[i],)))
			print('Value '+hex(list_fs[i])+'('+str(list_fs[i])+'°C)'+' written at '+hex(list_fsa[i])+'(byte'+str(list_fsa[i])+')')

# option -s
# argumentparser va lancer deux fois la fonction avec un value different au lieu de créer une liste...
def ec_set(value):
	global list_s
	list_s.append(value)
	if len(list_s)==2:
		with open(EC_IO_FILE,"r+b") as file:
			file.seek(int(list_s[0],16))
			file.write(bytes((int(list_s[1]),)))
			print('\r')
			print('Value '+hex(int(list_s[1]))+'('+str(list_s[1])+'°C)'+' written at '+list_s[0]+'(byte'+str(int(list_s[0],16))+')')

# option -c
class ec_checkC(Action):
	def __call__(self, parser, namespace, values, option_string=None):
		print('\nEC dump '+str(DUMP_POS))
		print('\x1b[0;32;1m' + '       00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F' + '\x1b[0m')
		os.system("od -A x -t x1z "+str(EC_IO_FILE))

def main():
	# permet l'utilisation d'arguments
	# type permet de lancer une fonction en passant obligatoirement un argument
	# sans argument, créer une class est nécessaire (c'est nul :D)
	parser = ArgumentParser(formatter_class=RawTextHelpFormatter, epilog=
"""
--- TIPS --------------------------------------------------------------------
-- Set your config in '/etc/isw.conf'.                                     --
-- Arguments order is relevant, -c can be used twice. Example:             --
-- isw -c -w [Profile] -c will show you EC dump before and after change.   --
--- SUPPORT -----------------------------------------------------------------
-- Please help me support more laptop by providing 'isw -c' output via:    --
-- https://github.com/YoyPa/isw (open an issue).                           --
--- NAME --------------------------------------------------------------------
-- ISW is MSI at 180°                                                      --
-- It mean Ice-Sealed Wyvern in opposition to MSI's "unleash the dragon"   --
-----------------------------------------------------------------------------
"""
	)
	parser.add_argument("-r", type=ec_read,
						help="┬ show realtime CPU+GPU temp and fan speed from EC\n└ replace R with PROFILE_NAME")
	parser.add_argument("-w", type=ec_write,
						help="┬ write into EC\n└ replace W with PROFILE_NAME")
	parser.add_argument("-s", type=ec_set, nargs=2,
						help="┬ set a single value into EC\n└ replace first S with address(hex) second S with value(dec)")
	parser.add_argument("-c", action=ec_checkC, nargs=0,
						help="─ show an EC dump")
	parser.parse_args()

if __name__ == "__main__":
    main()
