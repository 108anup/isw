#! /usr/bin/python3

# IMPORTS
import sys
import os
import configparser
from argparse import ArgumentParser
from argparse import Action
from argparse import RawTextHelpFormatter

# VARIABLES GLOBALES
EC_IO_FILE="/sys/kernel/debug/ec/ec0/io"
CFG_FILE="/etc/isw.conf"
DUMP_POS=""
list_s=[]
list_b=[]

# FONCTIONS
# option -p
def ec_profile(value):
	print('\nProfile dump '+str(DUMP_POS))
	with open(CFG_FILE) as cfgfile:
		cfgp=configparser.ConfigParser()
		cfgp.read_file(cfgfile)
		# c=cpu g=gpu t=temp f=fan s=speed a=address p=profile r=realtime m=mode cb=coolerboost
		list_cta = []
		list_ct = []
		list_cfsa = []
		list_cfs = []
		list_gta = []
		list_gt = []
		list_gfsa = []
		list_gfs = []
		ap = cfgp.get(value, 'address_profile')
		fma = int(cfgp.get(ap, 'fan_mode_address'),16)
		for i in range(7):
			if i<6:
				list_cta.append(int(cfgp.get(ap, 'cpu_temp_address_'+str(i)),16))
				list_gta.append(int(cfgp.get(ap, 'gpu_temp_address_'+str(i)),16))
			list_cfsa.append(int(cfgp.get(ap, 'cpu_fan_speed_address_'+str(i)),16))
			list_gfsa.append(int(cfgp.get(ap, 'gpu_fan_speed_address_'+str(i)),16))
	with open(EC_IO_FILE,"r+b") as file:
		file.seek(fma)
		fm = int(file.read(1).hex(),16)
		if fm==int(140):
			sfm='Advanced'
		elif fm==int(76):
			sfm='Basic'
		elif fm==int(12):
			sfm='Auto'
		print('\x1b[0;32;1m'+"%-11s %-16s %s" %(
				'Value',
				'set @ address',
				'Fan mode'
		)+'\x1b[0m')
		print("%-11s %-16s %s" %(
			hex(fm)+'('+str(fm)+')',
			hex(fma)+'(byte'+str(fma)+')',
			sfm+'\n'
		))
		for i in range(6):
			file.seek(list_cta[i])
			list_ct.append(int(file.read(1).hex(),16))
			file.seek(list_gta[i])
			list_gt.append(int(file.read(1).hex(),16))
			if i==0:
				print('-----------CPU-----------    -----------GPU-----------')
				print('\x1b[0;32;1m'+"%-11s %-16s %-11s %s" %(
					'Value',
					'set @ address',
					'Value',
					'set @ address'
				)+'\x1b[0m')
			print("%-11s %-16s %-11s %s" %(
				hex(list_ct[i])+'('+str(list_ct[i])+'°C)',
				hex(list_cta[i])+'(byte'+str(list_cta[i])+')',
				hex(list_gt[i])+'('+str(list_gt[i])+'°C)',
				hex(list_gta[i])+'(byte'+str(list_gta[i])+')'
			))
		for i in range(7):
			file.seek(list_cfsa[i])
			list_cfs.append(int(file.read(1).hex(),16))
			file.seek(list_gfsa[i])
			list_gfs.append(int(file.read(1).hex(),16))
			if i==0:
				print('\r')
			print("%-11s %-16s %-11s %s" %(
				hex(list_cfs[i])+'('+str(list_cfs[i])+'%)',
				hex(list_cfsa[i])+'(byte'+str(list_cfsa[i])+')',
				hex(list_gfs[i])+'('+str(list_gfs[i])+'%)',
				hex(list_gfsa[i])+'(byte'+str(list_gfsa[i])+')'
			))

# option -r
def ec_read(value):
	with open(CFG_FILE) as cfgfile:
		cfgp=configparser.ConfigParser()
		cfgp.read_file(cfgfile)
		# c=cpu g=gpu t=temp f=fan s=speed a=address p=profile r=realtime m=mode cb=coolerboost
		ap = cfgp.get(value, 'address_profile')
		rcta = int(cfgp.get(ap, 'realtime_cpu_temp_address'),16)
		rcfsa = int(cfgp.get(ap, 'realtime_cpu_fan_speed_address'),16)
		rgta = int(cfgp.get(ap, 'realtime_gpu_temp_address'),16)
		rgfsa = int(cfgp.get(ap, 'realtime_gpu_fan_speed_address'),16)
	with open(EC_IO_FILE,"rb") as file:
		file.seek(rcta)
		temp_cpu = int(file.read(1).hex(),16)
		file.seek(rcfsa)
		fans_cpu = int(file.read(1).hex(),16)
		file.seek(rgta)
		temp_gpu = int(file.read(1).hex(),16)
		file.seek(rgfsa)
		fans_gpu = int(file.read(1).hex(),16)
		print("CPU")
		print("└─temp     (°C): "+str(temp_cpu))
		print("└─fan speed (%): "+str(fans_cpu))
		print("GPU")
		print("└─temp     (°C): "+str(temp_gpu))
		print("└─fan speed (%): "+str(fans_gpu))

# option -w
def ec_write(value):
	global DUMP_POS
	DUMP_POS="after modification"
	print('\nWriting config to EC...')
	with open(CFG_FILE) as cfgfile:
		cfgp=configparser.ConfigParser()
		cfgp.read_file(cfgfile)
		# c=cpu g=gpu t=temp f=fan s=speed a=address p=profile r=realtime m=mode cb=coolerboost
		list_cta = []
		list_ct = []
		list_cfsa = []
		list_cfs = []
		list_gta = []
		list_gt = []
		list_gfsa = []
		list_gfs = []
		ap = cfgp.get(value, 'address_profile')
		fma = int(cfgp.get(ap, 'fan_mode_address'),16)
		fm = int(cfgp.get(value, 'fan_mode'))
		for i in range(7):
			if i<6:
				list_cta.append(int(cfgp.get(ap, 'cpu_temp_address_'+str(i)),16))
				list_ct.append(int(cfgp.get(value, 'cpu_temp_'+str(i))))
				list_gta.append(int(cfgp.get(ap, 'gpu_temp_address_'+str(i)),16))
				list_gt.append(int(cfgp.get(value, 'gpu_temp_'+str(i))))
			list_cfsa.append(int(cfgp.get(ap, 'cpu_fan_speed_address_'+str(i)),16))
			list_cfs.append(int(cfgp.get(value, 'cpu_fan_speed_'+str(i))))
			list_gfsa.append(int(cfgp.get(ap, 'gpu_fan_speed_address_'+str(i)),16))
			list_gfs.append(int(cfgp.get(value, 'gpu_fan_speed_'+str(i))))
	with open(EC_IO_FILE,"r+b") as file:
		file.seek(fma)
		file.write(bytes((fm,)))
		if fm==int(140):
			sfm='Advanced'
		elif fm==int(76):
			sfm='Basic'
		elif fm==int(12):
			sfm='Auto'
		print('\x1b[0;32;1m'+"%-11s %-16s %s" %(
				'Value',
				'set @ address',
				'Fan mode'
		)+'\x1b[0m')
		print("%-11s %-16s %s" %(
			hex(fm)+'('+str(fm)+')',
			hex(fma)+'(byte'+str(fma)+')',
			sfm+'\n'
		))
		for i in range(6):
			file.seek(list_cta[i])
			file.write(bytes((list_ct[i],)))
			file.seek(list_gta[i])
			file.write(bytes((list_gt[i],)))
			if i==0:
				print('-----------CPU-----------    -----------GPU-----------')
				print('\x1b[0;32;1m'+"%-11s %-16s %-11s %s" %(
					'Value',
					'set @ address',
					'Value',
					'set @ address'
				)+'\x1b[0m')
			print("%-11s %-16s %-11s %s" %(
				hex(list_ct[i])+'('+str(list_ct[i])+'°C)',
				hex(list_cta[i])+'(byte'+str(list_cta[i])+')',
				hex(list_gt[i])+'('+str(list_gt[i])+'°C)',
				hex(list_gta[i])+'(byte'+str(list_gta[i])+')'
			))
		for i in range(7):
			file.seek(list_cfsa[i])
			file.write(bytes((list_cfs[i],)))
			file.seek(list_gfsa[i])
			file.write(bytes((list_gfs[i],)))
			if i==0:
				print('\r')
			print("%-11s %-16s %-11s %s" %(
				hex(list_cfs[i])+'('+str(list_cfs[i])+'%)',
				hex(list_cfsa[i])+'(byte'+str(list_cfsa[i])+')',
				hex(list_gfs[i])+'('+str(list_gfs[i])+'%)',
				hex(list_gfsa[i])+'(byte'+str(list_gfsa[i])+')'
			))

# option -s
# argumentparser va lancer deux fois la fonction avec un value different au lieu de créer une liste...
def ec_set(value):
	global list_s
	list_s.append(value)
	if len(list_s)==2:
		with open(EC_IO_FILE,"r+b") as file:
			file.seek(int(list_s[0],16))
			file.write(bytes((int(list_s[1]),)))
			print('\r')
			print('\x1b[0;32;1m'+"%-11s %s" %(
				'Value',
				'set @ address'
			)+'\x1b[0m')
			print("%-11s %s" %(
				hex(int(list_s[1]))+'('+str(list_s[1])+')',
				list_s[0]+'(byte'+str(int(list_s[0],16))+')'
			))

# option -b
# argumentparser va lancer deux fois la fonction avec un value different au lieu de créer une liste...
def ec_boost(value):
	global list_b
	list_b.append(value)
	if len(list_b)==2:
		with open(CFG_FILE) as cfgfile:
			cfgp=configparser.ConfigParser()
			cfgp.read_file(cfgfile)
			# c=cpu g=gpu t=temp f=fan s=speed a=address p=profile r=realtime m=mode cb=coolerboost
			ap = cfgp.get(list_b[0], 'address_profile')
			cba = int(cfgp.get(ap, 'cooler_boost_address'),16)
			cb = int(cfgp.get(list_b[0], 'cooler_boost'))
		with open(EC_IO_FILE,"r+b") as file:
			if list_b[1]=='on':
				file.seek(cba)
				file.write(bytes((cb,)))
				print('\r')
				print('\x1b[0;32;1m'+"%-11s %s" %(
					'Value',
					'set @ address'
				)+'\x1b[0m')
				print("%-11s %s" %(
					hex(cb)+'('+str(cb)+')',
					hex(cba)+'(byte'+str(cba)+')'
				))
			elif list_b[1]=='off':
				file.seek(cba)
				file.write(bytes((int(0),)))
				print('\r')
				print('\x1b[0;32;1m'+"%-11s %s" %(
					'Value',
					'set @ address'
				)+'\x1b[0m')
				print("%-11s %s" %(
					hex(0)+'('+str(0)+')',
					hex(cba)+'(byte'+str(cba)+')'
				))
			else:
				print('Error: Only \033[4mon\033[0m and \033[4moff\033[0m are valid.')

# option -c
class ec_checkC(Action):
	def __call__(self, parser, namespace, values, option_string=None):
		print('\nEC dump '+str(DUMP_POS))
		print('\x1b[0;32;1m' + '       00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F' + '\x1b[0m')
		os.system("od -A x -t x1z "+str(EC_IO_FILE))

def main():
	# permet l'utilisation d'arguments
	# type permet de lancer une fonction en passant obligatoirement un argument
	# sans argument, créer une class est nécessaire (c'est nul :D)
	parser = ArgumentParser(formatter_class=RawTextHelpFormatter, epilog=
"""
┌─ TIPS ──────────────────────────────────────────────────────────────────┐
│ Set your config in '/etc/isw.conf'.                                     │
│ Arguments order is relevant, -c and -p can be used twice. Example:      │
│ isw -cw \033[4mPROFILE_NAME\033[0m -c will show you EC dump before and after change.  │
├─ SUPPORT ───────────────────────────────────────────────────────────────┤
│ Help me support your laptop by providing following command output:      │
│ isw -cp MSI_ADDRESS_DEFAULT                                             │
│ via https://github.com/YoyPa/isw (open an issue).                       │
├─ NAME ──────────────────────────────────────────────────────────────────┤
│ ISW is MSI at 180°                                                      │
│ It mean Ice-Sealed Wyvern in opposition to MSI's "unleash the dragon"   │
└─────────────────────────────────────────────────────────────────────────┘
"""
	)
	parser.add_argument("-p", type=ec_profile,
						help="┬ show current profile in EC\n"
						     "└ replace \033[4mP\033[0m with \033[4mPROFILE_NAME\033[0m\n ")
	parser.add_argument("-r", type=ec_read,
						help="┬ show realtime CPU+GPU temp and fan speed from EC\n"
							 "└ replace \033[4mR\033[0m with \033[4mPROFILE_NAME\033[0m\n ")
	parser.add_argument("-w", type=ec_write,
						help="┬ write into EC\n"
						     "└ replace \033[4mW\033[0m with \033[4mPROFILE_NAME\033[0m\n ")
	parser.add_argument("-s", type=ec_set, nargs=2,
						help="┬ set a single value into EC\n"
						     "├ replace 1st \033[4mS\033[0m with \033[4mADDRESS\033[0m in hexadecimal (0x00)\n"
						     "└ replace 2nd \033[4mS\033[0m with \033[4mVALUE\033[0m   in decimal     (00)\n ")
	parser.add_argument("-b", type=ec_boost, nargs=2,
						help="┬ activate or disable CoolerBoost\n"
						     "├ replace 1st \033[4mB\033[0m with \033[4mPROFILE_NAME\033[0m\n"
						     "└ replace 2nd \033[4mB\033[0m with \033[4mon\033[0m OR \033[4moff\033[0m\n ")
	parser.add_argument("-c", action=ec_checkC, nargs=0,
						help="─ show an EC dump")
	parser.parse_args()

if __name__ == "__main__":
    main()
